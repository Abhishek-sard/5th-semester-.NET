1. Assign string:
String s;
s="hello world";

2. copying string
String s1 = s;
String s1 = string.Copy(s);

3. Concatending string
String s2 = s + s1;
String s2 = string.Concat(s,s1);

4. Number to string
int a = 10;
string s = a.ToString();

5. String insert
String s1 = "hello",
string s2 = s1.insert(3,"world"),
string s3 = s1.insert(3,"done"),

6. String Compare
int n = string Compare(s1, s2);
bool a = s1.Equal(s2),
s1.CompareTo(s2)

7. Parsing is the process of converting a string into another data types like int,float,
8. Sorting is the technique of putting the items of a collection in a certain order in C#
9. string are object that allow us to store sequence of character which may conatin.
10. params is used as a parameter which can take the variable number of arguments of specific data type.


11. operator
left associativity
left to right

12. right associativity
right to left

13. Null coalescing operator
string s1 = null;
string s2 = s1 ?? "nothing";

14. Null condition operator

15. Namespace
namespace MyNamespace{
    class MyClass{
        public void MyMethod(){
            //statement
        }
    }
}

16. Namespace: a logical container that organizes identifiers (names of types, functions, variables, etc.) to prevent naming conflicts and improve code organization

17. Exception handling: allow you to gracefully manage unexpected event that occur during program execution.
18. Nested try block allow handling different Exception at different levels. ensuring better control over error handling.
19.try and catch are key Components of exception handling. they help handle runtime errors gracefully withot crashig the program.
20. try{
    //if an error occurs inside the try block, the control is transferred to the catch block.
}
21. catch{
    catches and handle exception thrown in the try block.
}
22. interface 
interface interface_name{
    //method signature
}
class class_name : interface_name{
    //method implementation
}


interface calculate{
    void data(int l, int b, int h);
    void area();
    void perimeter();
    void volume();
}
class B: calculate{
    void data(int l, int b, int h)
    this. l = 10;
    this. b = 20;
    this. h = 19;

}
void area(){
    int area = l * b;
    return area;
}
interface: provide abstraction

23. multiple inheritance: 2 child = 1 parent;
24. hybrid inheritance: