1. Assign string:
String s;
s="hello world";

2. copying string
String s1 = s;
String s1 = string.Copy(s);

3. Concatending string
String s2 = s + s1;
String s2 = string.Concat(s,s1);

4. Number to string
int a = 10;
string s = a.ToString();

5. String insert
String s1 = "hello",
string s2 = s1.insert(3,"world"),
string s3 = s1.insert(3,"done"),

6. String Compare
int n = string Compare(s1, s2);
bool a = s1.Equal(s2),
s1.CompareTo(s2)

7. Parsing is the process of converting a string into another data types like int,float,
8. Sorting is the technique of putting the items of a collection in a certain order in C#
9. string are object that allow us to store sequence of character which may conatin.
10. params is used as a parameter which can take the variable number of arguments of specific data type.


11. operator
left associativity
left to right

12. right associativity
right to left

13. Null coalescing operator
string s1 = null;
string s2 = s1 ?? "nothing";

14. Null condition operator

15. Namespace
namespace MyNamespace{
    class MyClass{
        public void MyMethod(){
            //statement
        }
    }
}

16. Namespace: a logical container that organizes identifiers (names of types, functions, variables, etc.) to prevent naming conflicts and improve code organization

17. Exception handling: allow you to gracefully manage unexpected event that occur during program execution.
18. Nested try block allow handling different Exception at different levels. ensuring better control over error handling.
19.try and catch are key Components of exception handling. they help handle runtime errors gracefully withot crashig the program.
20. try{
    //if an error occurs inside the try block, the control is transferred to the catch block.
}
21. catch{
    catches and handle exception thrown in the try block.
}
22. interface 
interface interface_name{
    //method signature
}
class class_name : interface_name{
    //method implementation
}


interface calculate{
    void data(int l, int b, int h);
    void area();
    void perimeter();
    void volume();
}
class B: calculate{
    void data(int l, int b, int h)
    this. l = 10;
    this. b = 20;
    this. h = 19;

}
void area(){
    int area = l * b;
    return area;
}
interface: provide abstraction

23. multiple inheritance: 2 child = 1 parent;
example:
Using System;
interface bird{
    void fly();
}
interface fish{
    void swim();
}
class c: a,b{
    public void fly(){
        console.writeline("It is flying");
    }
    public void swin(){
        console.writeline("It is swimming");
    }
}
class program{
    static void Main(String[]args){
        c obj = new c ();

        obj.fly();
        obj.swim();
        console.Readline();

    }
}
24. hybrid inheritance: 
Using System;
Interface A{
    void fly();
}
interface B{
    void swim();

}
class Animal{
    public void eat(){
        console.writeline("it eats:")
    }
}
class c:A,b{
    publc void fly(){
        console.writeline("it is flying");
    }
    public void swim(){
        console.writeline("it is swimming");
    }
}
class Dog:Animal,c{
    publc void bark(){
        console.writeline("it barks:");
    }
}
class Program{
    static vid Main(String[]args){
        c obj = new c ();
        obj. fly();
        obj.swim();
        Dog myDog = new Dog();
        myDog.fly();
        myDog.swim();
        myDog.eat();
        myDog.bark();
    }
}
Events:
Using System;
namespace EventSample{
    public delegate void buttonClick();
    public class button(){
        public event buttonClick Onclick;
        public void Click(){
            Console.writeline("clicked");
            if(OnClick ! = null);
            OnClick.invoke();

        }publc class Subscriber{
            public void HandleClick(){
                Console.writeline("Handled");
            }
        }
    }
    Class Program{
    static void Main(String[]args){
        Button button = new Button();
        Subscriber subs = new Subscriber();
        button.OnClick +=subs.HandleClick;

        button.Click();
    }
}

}

//lambda expression
A way to define an anonymous function or method without explicity creating a method or delegate.
often used in conjunction with linq
syntax: (input parameter)=>expression
can be of two types:
1. expression lambda consists of input and expression . syntax input => expression;
2. statement lambda: consists of input and set of statement to be excetuted syntax: input=> statements:


LINQ METHOD - LAMBDA EXPRESSION
 Linq Opearator

 where, Typeof -> filtering
 orderBy, orderByDescedning, Then By, etc-> sorting
 GroupBy, ToLookUp -> Grouping
 GroupJoin, Join -> join
 select selectmany -> protecting
 aggregate, average, etc -> aggregration
 all, any, contains -> quantifiers
 elementat, first, last, etc -> elements
 distnct, except, etc -> set
 skip, skipwhile take -> partitiong
 concat -> concatenation
 Equal, sequence, Equal -> equality
 empty, range, repeat -> generation
 todictionary, tolist, etc -> conversion




